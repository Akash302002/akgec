Question 1

#include <iostream>
using namespace std;

int main() {
    int rows = 5;

    
    for (int i = 1; i <= rows; i++) {
        
        for (int j = 1; j <= rows - i; j++) {
            cout << " ";
        }
        
        for (int j = 1; j <= 2 * i - 1; j++) {
            cout << "*";
        }
        cout << endl;
    }

    
    for (int i = rows - 1; i >= 1; i--) {
       
        for (int j = 1; j <= rows - i; j++) {
            cout << " ";
        }
        
        for (int j = 1; j <= 2 * i - 1; j++) {
            cout << "*";
        }
        cout << endl;
    }

    return 0;
}

Question 2
#include <iostream>
#include<bits/stdc++.h>

using namespace std;


bool isPrime(int num) {
    if (num <= 1) return false; // 0 and 1 are not prime
    for (int i = 2; i <= sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

// Function to sort a vector in descending order
void sortDescending(vector<int>& arr) {
   sort(arr.begin(),arr.end(),greater<int>());
}

// Function to process the array
vector<int> processArray(const vector<int>& arr) {
    vector<int> primes, nonPrimes;

   
    for (int num : arr) {
        if (isPrime(num)) {
            primes.push_back(num);
        } else {
            nonPrimes.push_back(num);
        }
    }

    // Handle the case when there are fewer than 2 primes
    if (primes.size() < 2) {
        cout << "array must contain at least two prime numbers." << endl;
        return arr; // Return the original array
    }

    // Find the largest and smallest primes
    sort(primes.begin(),primes.end());
    int largestPrime = primes[primes.size()-1];
     int smallestPrime = primes[0];

    
    sortDescending(nonPrimes);

   
    vector<int> result;
    result.push_back(largestPrime);                // Add largest prime at the start
    result.insert(result.end(), nonPrimes.begin(), nonPrimes.end()); // Add sorted non-primes
    result.push_back(smallestPrime);              // Add smallest prime at the end

    return result;
}

int main() {
    
    vector<int> example1 = {4,2,11,13,1};
    vector<int> result1 = processArray(example1);

    cout << "Output for Example 1: ";
    for (int num : result1) {
        cout << num << " ";
    }
    cout << endl;

    // Example 2
    vector<int> example2 = {1, 6, 4, 13, 9, 3};
    vector<int> result2 = processArray(example2);

    cout << "Output for Example 2: ";
    for (int num : result2) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
